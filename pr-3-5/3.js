function determinant(matrix) {
  const n = matrix.length;
  if (n === 1) return matrix[0][0];
  if (n === 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];

  let det = 0;
  for (let j = 0; j < n; j++) {
    const subMatrix = matrix
      .slice(1)
      .map((row) => row.filter((_, col) => col !== j));
    det += (j % 2 === 0 ? 1 : -1) * matrix[0][j] * determinant(subMatrix);
  }
  return det;
}

function cofactorMatrix(matrix) {
  const n = matrix.length;
  let cofactors = Array(n)
    .fill(null)
    .map(() => Array(n).fill(0));

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      const subMatrix = matrix
        .filter((_, row) => row !== i)
        .map((row) => row.filter((_, col) => col !== j));

      const minorDet = determinant(subMatrix);
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ñ–∞–∫—Ç–æ—Ä –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (-1)^(i+j) * det(–º–∏–Ω–æ—Ä)
      cofactors[i][j] = (i + j) % 2 === 0 ? minorDet : -minorDet;
    }
  }
  return cofactors;
}

function transpose(matrix) {
  const n = matrix.length;
  let transposed = Array(n)
    .fill(null)
    .map(() => Array(n).fill(0));

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      transposed[j][i] = matrix[i][j];
    }
  }
  return transposed;
}

function adjugateMatrix(matrix) {
  // –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ñ–∞–∫—Ç–æ—Ä–æ–≤
  const cofactors = cofactorMatrix(matrix);
  // –ó–∞—Ç–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
  return transpose(cofactors);
}

function inverseMatrix(matrix) {
  const det = determinant(matrix);
  if (det === 0) {
    console.log("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å = 0. –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–∞, –æ–±—Ä–∞—Ç–Ω–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
    return null;
  }

  console.log(`–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: ${det}\n`);

  console.log("–í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π...");
  const cofactors = cofactorMatrix(matrix);
  printMatrix(cofactors, "–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ñ–∞–∫—Ç–æ—Ä–æ–≤");

  console.log("–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ñ–∞–∫—Ç–æ—Ä–æ–≤...");
  const adj = transpose(cofactors);
  printMatrix(adj, "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞");

  console.log("–ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É...");
  const inverse = adj.map((row) => row.map((value) => value / det));
  printMatrix(inverse, "–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞");

  return inverse;
}

function printMatrix(matrix, title) {
  console.log(`\n${title}:`);
  matrix.forEach((row) =>
    console.log(row.map((value) => value.toFixed(5)).join("\t"))
  );
}

// üîπ –ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
const matrix = [
  [1, 2, 3],
  [0, 1, 4],
  [5, 6, 0],
];

console.log("–ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:");
printMatrix(matrix, "Matrix");

// üîπ –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
const inverse = inverseMatrix(matrix);
